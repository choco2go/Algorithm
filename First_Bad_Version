/**
 * Definition for isBadVersion()
 * 
 * @param {integer} version number
 * @return {boolean} whether the version is bad
 * isBadVersion = function(version) {
 *     ...
 * };
 */

/**
 * @param {function} isBadVersion()
 * @return {function}
 */
var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n) {
        var firstBadVersion = n;
        var halfRound = Math.round(n/2);
        var pointer = halfRound; 
        var lastGoodVersion = 0; 
        console.log("halfRound : " + halfRound); 
        for (var i = 0; i < n; i++){
            if (isBadVersion(pointer)) { //bad version -> go forward  
                console.log("inBadVersion : " + pointer + " : " + isBadVersion(pointer));
                firstBadVersion = pointer;
                if (pointer-1 === lastGoodVersion) {//if the previous version is good, this is the firstBad
                    break; 
                } else { 
                    pointer = Math.round(pointer/2);
                }
            } else { //good version -> go next  
                console.log("inBadVersion : " + pointer + " : " + isBadVersion(pointer));
                lastGoodVersion = pointer; 
                pointer = Math.round((pointer + firstBadVersion)/2); 
            }
            
        }
        return firstBadVersion; 

    };
};
